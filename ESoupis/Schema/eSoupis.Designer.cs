// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.2.0.0. www.xsd2code.com
//    {"TargetFramework":"NetStandard","NameSpace":"ESoupis","Properties":{},"XmlAttribute":{"Enabled":true},"ClassParams":{},"Serialization":{"ShouldSerialize":{},"XmlSerializerEvent":{},"XmlOutput":{},"JsonOutput":{},"Enabled":true},"Miscellaneous":{}}
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace ESoupis
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Xml;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlRootAttribute("eSoupis", Namespace = "", IsNullable = false)]
    public partial class TeSoupis
    {
        #region Private fields
        private List<TStavba> _sTAVBA;
        private TKodMeny _mena;
        private TVerze _verze;
        private TTypZdroje _zdroj;
        private string _uID;
        private static XmlSerializer _serializer;
        #endregion

        public TeSoupis()
        {
            _sTAVBA = new List<TStavba>();
        }

        [XmlElement("STAVBA")]
        public List<TStavba> STAVBA
        {
            get
            {
                return _sTAVBA;
            }
            set
            {
                _sTAVBA = value;
            }
        }

        [XmlAttribute]
        public TKodMeny Mena
        {
            get
            {
                return _mena;
            }
            set
            {
                _mena = value;
            }
        }

        [XmlAttribute]
        public TVerze Verze
        {
            get
            {
                return _verze;
            }
            set
            {
                _verze = value;
            }
        }

        [XmlAttribute]
        public TTypZdroje Zdroj
        {
            get
            {
                return _zdroj;
            }
            set
            {
                _zdroj = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string UID
        {
            get
            {
                return _uID;
            }
            set
            {
                _uID = value;
            }
        }

        private static XmlSerializer SerializerXML
        {
            get
            {
                if ((_serializer == null))
                {
                    _serializer = new XmlSerializerFactory().CreateSerializer(typeof(TeSoupis));
                }
                return _serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize TeSoupis object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXML.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes TeSoupis object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TeSoupis object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TeSoupis obj, out Exception exception)
        {
            exception = null;
            obj = default(TeSoupis);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TeSoupis obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TeSoupis Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TeSoupis)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TeSoupis Deserialize(Stream s)
        {
            return ((TeSoupis)(SerializerXML.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TeSoupis object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TeSoupis object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TeSoupis object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TeSoupis obj, out Exception exception)
        {
            exception = null;
            obj = default(TeSoupis);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TeSoupis obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TeSoupis LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TStavba
    {
        #region Private fields
        private List<TSubjekt> _sUBJEKT;
        private string _sPOPIS;
        private List<TObjekt> _oBJEKT;
        private string _cislo;
        private string _nazev;
        private string _misto;
        private static XmlSerializer _serializer;
        #endregion

        public TStavba()
        {
            _oBJEKT = new List<TObjekt>();
            _sUBJEKT = new List<TSubjekt>();
        }

        [XmlElement("SUBJEKT")]
        public List<TSubjekt> SUBJEKT
        {
            get
            {
                return _sUBJEKT;
            }
            set
            {
                _sUBJEKT = value;
            }
        }

        [XmlElement("SPOPIS")]
        public string SPOPIS
        {
            get
            {
                return _sPOPIS;
            }
            set
            {
                _sPOPIS = value;
            }
        }

        [XmlElement("OBJEKT")]
        public List<TObjekt> OBJEKT
        {
            get
            {
                return _oBJEKT;
            }
            set
            {
                _oBJEKT = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Cislo
        {
            get
            {
                return _cislo;
            }
            set
            {
                _cislo = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Nazev
        {
            get
            {
                return _nazev;
            }
            set
            {
                _nazev = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Misto
        {
            get
            {
                return _misto;
            }
            set
            {
                _misto = value;
            }
        }

        private static XmlSerializer SerializerXML
        {
            get
            {
                if ((_serializer == null))
                {
                    _serializer = new XmlSerializerFactory().CreateSerializer(typeof(TStavba));
                }
                return _serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize TStavba object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXML.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes TStavba object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TStavba object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TStavba obj, out Exception exception)
        {
            exception = null;
            obj = default(TStavba);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TStavba obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TStavba Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TStavba)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TStavba Deserialize(Stream s)
        {
            return ((TStavba)(SerializerXML.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TStavba object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TStavba object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TStavba object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TStavba obj, out Exception exception)
        {
            exception = null;
            obj = default(TStavba);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TStavba obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TStavba LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TSubjekt
    {
        #region Private fields
        private TTypSubjektu _typ;
        private string _iCO;
        private string _dIC;
        private string _nazev;
        private string _adresa;
        private string _misto;
        private string _pSC;
        private string _stat;
        private string _kontakt;
        private string _telefon;
        private string _email;
        private static XmlSerializer _serializer;
        #endregion

        [XmlAttribute]
        public TTypSubjektu Typ
        {
            get
            {
                return _typ;
            }
            set
            {
                _typ = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string ICO
        {
            get
            {
                return _iCO;
            }
            set
            {
                _iCO = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string DIC
        {
            get
            {
                return _dIC;
            }
            set
            {
                _dIC = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Nazev
        {
            get
            {
                return _nazev;
            }
            set
            {
                _nazev = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Adresa
        {
            get
            {
                return _adresa;
            }
            set
            {
                _adresa = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Misto
        {
            get
            {
                return _misto;
            }
            set
            {
                _misto = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string PSC
        {
            get
            {
                return _pSC;
            }
            set
            {
                _pSC = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Stat
        {
            get
            {
                return _stat;
            }
            set
            {
                _stat = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Kontakt
        {
            get
            {
                return _kontakt;
            }
            set
            {
                _kontakt = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Telefon
        {
            get
            {
                return _telefon;
            }
            set
            {
                _telefon = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Email
        {
            get
            {
                return _email;
            }
            set
            {
                _email = value;
            }
        }

        private static XmlSerializer SerializerXML
        {
            get
            {
                if ((_serializer == null))
                {
                    _serializer = new XmlSerializerFactory().CreateSerializer(typeof(TSubjekt));
                }
                return _serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize TSubjekt object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXML.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes TSubjekt object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TSubjekt object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TSubjekt obj, out Exception exception)
        {
            exception = null;
            obj = default(TSubjekt);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TSubjekt obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TSubjekt Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TSubjekt)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TSubjekt Deserialize(Stream s)
        {
            return ((TSubjekt)(SerializerXML.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TSubjekt object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TSubjekt object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TSubjekt object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TSubjekt obj, out Exception exception)
        {
            exception = null;
            obj = default(TSubjekt);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TSubjekt obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TSubjekt LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    public enum TTypSubjektu
    {
        OBJEDNATEL,
        DODAVATEL,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TObjekt
    {
        #region Private fields
        private string _oPOPIS;
        private List<TSoupis> _sOUPIS;
        private string _cislo;
        private string _nazev;
        private TTypObjektu _typ;
        private string _cisloJKSO;
        private string _nazevJKSO;
        private string _charakteristika;
        private string _druhStavebniAkce;
        private static XmlSerializer _serializer;
        #endregion

        public TObjekt()
        {
            _sOUPIS = new List<TSoupis>();
        }

        public string OPOPIS
        {
            get
            {
                return _oPOPIS;
            }
            set
            {
                _oPOPIS = value;
            }
        }

        [XmlElement("SOUPIS")]
        public List<TSoupis> SOUPIS
        {
            get
            {
                return _sOUPIS;
            }
            set
            {
                _sOUPIS = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Cislo
        {
            get
            {
                return _cislo;
            }
            set
            {
                _cislo = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Nazev
        {
            get
            {
                return _nazev;
            }
            set
            {
                _nazev = value;
            }
        }

        [XmlAttribute]
        public TTypObjektu Typ
        {
            get
            {
                return _typ;
            }
            set
            {
                _typ = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string CisloJKSO
        {
            get
            {
                return _cisloJKSO;
            }
            set
            {
                _cisloJKSO = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string NazevJKSO
        {
            get
            {
                return _nazevJKSO;
            }
            set
            {
                _nazevJKSO = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Charakteristika
        {
            get
            {
                return _charakteristika;
            }
            set
            {
                _charakteristika = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string DruhStavebniAkce
        {
            get
            {
                return _druhStavebniAkce;
            }
            set
            {
                _druhStavebniAkce = value;
            }
        }

        private static XmlSerializer SerializerXML
        {
            get
            {
                if ((_serializer == null))
                {
                    _serializer = new XmlSerializerFactory().CreateSerializer(typeof(TObjekt));
                }
                return _serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize TObjekt object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXML.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes TObjekt object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TObjekt object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TObjekt obj, out Exception exception)
        {
            exception = null;
            obj = default(TObjekt);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TObjekt obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TObjekt Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TObjekt)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TObjekt Deserialize(Stream s)
        {
            return ((TObjekt)(SerializerXML.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TObjekt object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TObjekt object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TObjekt object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TObjekt obj, out Exception exception)
        {
            exception = null;
            obj = default(TObjekt);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TObjekt obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TObjekt LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TSoupis
    {
        #region Private fields
        private string _rPOPIS;
        private List<TZatrideni> _zATRIDENI;
        private List<TDil> _dIL;
        private string _cislo;
        private string _nazev;
        private static XmlSerializer _serializer;
        #endregion

        public TSoupis()
        {
            _dIL = new List<TDil>();
            _zATRIDENI = new List<TZatrideni>();
        }

        public string RPOPIS
        {
            get
            {
                return _rPOPIS;
            }
            set
            {
                _rPOPIS = value;
            }
        }

        [XmlElement("ZATRIDENI")]
        public List<TZatrideni> ZATRIDENI
        {
            get
            {
                return _zATRIDENI;
            }
            set
            {
                _zATRIDENI = value;
            }
        }

        [XmlElement("DIL")]
        public List<TDil> DIL
        {
            get
            {
                return _dIL;
            }
            set
            {
                _dIL = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Cislo
        {
            get
            {
                return _cislo;
            }
            set
            {
                _cislo = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Nazev
        {
            get
            {
                return _nazev;
            }
            set
            {
                _nazev = value;
            }
        }

        private static XmlSerializer SerializerXML
        {
            get
            {
                if ((_serializer == null))
                {
                    _serializer = new XmlSerializerFactory().CreateSerializer(typeof(TSoupis));
                }
                return _serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize TSoupis object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXML.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes TSoupis object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TSoupis object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TSoupis obj, out Exception exception)
        {
            exception = null;
            obj = default(TSoupis);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TSoupis obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TSoupis Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TSoupis)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TSoupis Deserialize(Stream s)
        {
            return ((TSoupis)(SerializerXML.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TSoupis object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TSoupis object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TSoupis object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TSoupis obj, out Exception exception)
        {
            exception = null;
            obj = default(TSoupis);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TSoupis obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TSoupis LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TZatrideni
    {
        #region Private fields
        private string _zPOPIS;
        private List<TZatrideni> _zATRIDENI;
        private string _polozkaZatrideniUID;
        private TTypZatrideni _typ;
        private string _cislo;
        private string _nazev;
        private static XmlSerializer _serializer;
        #endregion

        public TZatrideni()
        {
            _zATRIDENI = new List<TZatrideni>();
        }

        [XmlElement("ZPOPIS")]
        public string ZPOPIS
        {
            get
            {
                return _zPOPIS;
            }
            set
            {
                _zPOPIS = value;
            }
        }

        [XmlElement("ZATRIDENI")]
        public List<TZatrideni> ZATRIDENI
        {
            get
            {
                return _zATRIDENI;
            }
            set
            {
                _zATRIDENI = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string PolozkaZatrideniUID
        {
            get
            {
                return _polozkaZatrideniUID;
            }
            set
            {
                _polozkaZatrideniUID = value;
            }
        }

        [XmlAttribute]
        public TTypZatrideni Typ
        {
            get
            {
                return _typ;
            }
            set
            {
                _typ = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Cislo
        {
            get
            {
                return _cislo;
            }
            set
            {
                _cislo = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Nazev
        {
            get
            {
                return _nazev;
            }
            set
            {
                _nazev = value;
            }
        }

        private static XmlSerializer SerializerXML
        {
            get
            {
                if ((_serializer == null))
                {
                    _serializer = new XmlSerializerFactory().CreateSerializer(typeof(TZatrideni));
                }
                return _serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize TZatrideni object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXML.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes TZatrideni object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TZatrideni object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TZatrideni obj, out Exception exception)
        {
            exception = null;
            obj = default(TZatrideni);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TZatrideni obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TZatrideni Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TZatrideni)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TZatrideni Deserialize(Stream s)
        {
            return ((TZatrideni)(SerializerXML.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TZatrideni object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TZatrideni object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TZatrideni object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TZatrideni obj, out Exception exception)
        {
            exception = null;
            obj = default(TZatrideni);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TZatrideni obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TZatrideni LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    public enum TTypZatrideni
    {
        C,
        K,
        P,
        D,
        O,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TDil
    {
        #region Private fields
        private string _dPOPIS;
        private List<TPolozka> _pOLOZKA;
        private TTypDilu _typ;
        private string _cislo;
        private string _nazev;
        private static XmlSerializer _serializer;
        #endregion

        public TDil()
        {
            _pOLOZKA = new List<TPolozka>();
        }

        public string DPOPIS
        {
            get
            {
                return _dPOPIS;
            }
            set
            {
                _dPOPIS = value;
            }
        }

        [XmlElement("POLOZKA")]
        public List<TPolozka> POLOZKA
        {
            get
            {
                return _pOLOZKA;
            }
            set
            {
                _pOLOZKA = value;
            }
        }

        [XmlAttribute]
        public TTypDilu Typ
        {
            get
            {
                return _typ;
            }
            set
            {
                _typ = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Cislo
        {
            get
            {
                return _cislo;
            }
            set
            {
                _cislo = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Nazev
        {
            get
            {
                return _nazev;
            }
            set
            {
                _nazev = value;
            }
        }

        private static XmlSerializer SerializerXML
        {
            get
            {
                if ((_serializer == null))
                {
                    _serializer = new XmlSerializerFactory().CreateSerializer(typeof(TDil));
                }
                return _serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize TDil object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXML.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes TDil object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TDil object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TDil obj, out Exception exception)
        {
            exception = null;
            obj = default(TDil);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TDil obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TDil Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TDil)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TDil Deserialize(Stream s)
        {
            return ((TDil)(SerializerXML.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TDil object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TDil object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TDil object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TDil obj, out Exception exception)
        {
            exception = null;
            obj = default(TDil);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TDil obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TDil LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPolozka
    {
        #region Private fields
        private string _pPOPIS;
        private List<TVymera> _vYMERA;
        private long _poradoveCislo;
        private string _uID;
        private string _cislo;
        private TTypPolozky _typ;
        private string _nazev;
        private string _mj;
        private decimal _mnozstvi;
        private decimal _jHmotnost;
        private decimal _jDemontazniHmotnost;
        private decimal _sazbaDPH;
        private decimal _jCena;
        private decimal _cena;
        private string _polozkaZatrideniUID;
        private string _obchNazev;
        private bool _obchNazevAN;
        private string _cenovaSoustava;
        private static XmlSerializer _serializer;
        #endregion

        public TPolozka()
        {
            _vYMERA = new List<TVymera>();
        }

        [XmlElement("PPOPIS")]
        public string PPOPIS
        {
            get
            {
                return _pPOPIS;
            }
            set
            {
                _pPOPIS = value;
            }
        }

        [XmlElement("VYMERA")]
        public List<TVymera> VYMERA
        {
            get
            {
                return _vYMERA;
            }
            set
            {
                _vYMERA = value;
            }
        }

        [XmlAttribute]
        public long PoradoveCislo
        {
            get
            {
                return _poradoveCislo;
            }
            set
            {
                _poradoveCislo = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string UID
        {
            get
            {
                return _uID;
            }
            set
            {
                _uID = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Cislo
        {
            get
            {
                return _cislo;
            }
            set
            {
                _cislo = value;
            }
        }

        [XmlAttribute]
        public TTypPolozky Typ
        {
            get
            {
                return _typ;
            }
            set
            {
                _typ = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Nazev
        {
            get
            {
                return _nazev;
            }
            set
            {
                _nazev = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string MJ
        {
            get
            {
                return _mj;
            }
            set
            {
                _mj = value;
            }
        }

        [XmlAttribute]
        public decimal Mnozstvi
        {
            get
            {
                return _mnozstvi;
            }
            set
            {
                _mnozstvi = value;
            }
        }

        [XmlAttribute]
        public decimal JHmotnost
        {
            get
            {
                return _jHmotnost;
            }
            set
            {
                _jHmotnost = value;
            }
        }

        [XmlAttribute]
        public decimal JDemontazniHmotnost
        {
            get
            {
                return _jDemontazniHmotnost;
            }
            set
            {
                _jDemontazniHmotnost = value;
            }
        }

        [XmlAttribute]
        public decimal SazbaDPH
        {
            get
            {
                return _sazbaDPH;
            }
            set
            {
                _sazbaDPH = value;
            }
        }

        [XmlAttribute]
        public decimal JCena
        {
            get
            {
                return _jCena;
            }
            set
            {
                _jCena = value;
            }
        }

        [XmlAttribute]
        public decimal Cena
        {
            get
            {
                return _cena;
            }
            set
            {
                _cena = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string PolozkaZatrideniUID
        {
            get
            {
                return _polozkaZatrideniUID;
            }
            set
            {
                _polozkaZatrideniUID = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string ObchNazev
        {
            get
            {
                return _obchNazev;
            }
            set
            {
                _obchNazev = value;
            }
        }

        [XmlAttribute]
        public bool ObchNazevAN
        {
            get
            {
                return _obchNazevAN;
            }
            set
            {
                _obchNazevAN = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string CenovaSoustava
        {
            get
            {
                return _cenovaSoustava;
            }
            set
            {
                _cenovaSoustava = value;
            }
        }

        private static XmlSerializer SerializerXML
        {
            get
            {
                if ((_serializer == null))
                {
                    _serializer = new XmlSerializerFactory().CreateSerializer(typeof(TPolozka));
                }
                return _serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize TPolozka object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXML.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes TPolozka object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TPolozka object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TPolozka obj, out Exception exception)
        {
            exception = null;
            obj = default(TPolozka);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TPolozka obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TPolozka Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TPolozka)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TPolozka Deserialize(Stream s)
        {
            return ((TPolozka)(SerializerXML.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TPolozka object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TPolozka object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TPolozka object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TPolozka obj, out Exception exception)
        {
            exception = null;
            obj = default(TPolozka);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TPolozka obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TPolozka LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TVymera
    {
        #region Private fields
        private long _poradoveCislo;
        private TTypVymery _typ;
        private string _popis;
        private string _vyraz;
        private decimal _hodnota;
        private static XmlSerializer _serializer;
        #endregion

        [XmlAttribute]
        public long PoradoveCislo
        {
            get
            {
                return _poradoveCislo;
            }
            set
            {
                _poradoveCislo = value;
            }
        }

        [XmlAttribute]
        public TTypVymery Typ
        {
            get
            {
                return _typ;
            }
            set
            {
                _typ = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Popis
        {
            get
            {
                return _popis;
            }
            set
            {
                _popis = value;
            }
        }

        [XmlAttribute(DataType = "normalizedString")]
        public string Vyraz
        {
            get
            {
                return _vyraz;
            }
            set
            {
                _vyraz = value;
            }
        }

        [XmlAttribute]
        public decimal Hodnota
        {
            get
            {
                return _hodnota;
            }
            set
            {
                _hodnota = value;
            }
        }

        private static XmlSerializer SerializerXML
        {
            get
            {
                if ((_serializer == null))
                {
                    _serializer = new XmlSerializerFactory().CreateSerializer(typeof(TVymera));
                }
                return _serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize TVymera object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXML.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes TVymera object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TVymera object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TVymera obj, out Exception exception)
        {
            exception = null;
            obj = default(TVymera);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TVymera obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TVymera Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TVymera)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TVymera Deserialize(Stream s)
        {
            return ((TVymera)(SerializerXML.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TVymera object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TVymera object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TVymera object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TVymera obj, out Exception exception)
        {
            exception = null;
            obj = default(TVymera);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TVymera obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TVymera LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    public enum TTypVymery
    {
        N,
        P,
        S,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    public enum TTypPolozky
    {
        P,
        M,
        N,
        J,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    public enum TTypDilu
    {
        HSV,
        PSV,
        MON,
        VN,
        ON,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    public enum TTypObjektu
    {
        STA,
        PRO,
        ING,
        VON,
        OST,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    public enum TKodMeny
    {
        CZK,
        EUR,
        USD,
        GPB,
        RUR,
        CHF,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    public enum TVerze
    {
        [XmlEnumAttribute("1.0")]
        [EnumMember(Value = "1.0")]
        Item10,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    public enum TTypZdroje
    {
        RTS,
        Callida,
        URS,
        Valbek,
        Ostatni,
    }
}
#pragma warning restore
